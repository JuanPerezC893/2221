/**
 * Script para testear la creaci√≥n de proyectos en el backend de Vercel
 * Ayuda a debuggear errores de validaci√≥n
 */

const axios = require('axios');

const BACKEND_URL = 'https://3332-lilac.vercel.app/api';

const testProjectCreation = async () => {
  console.log('üß™ Testeando creaci√≥n de proyectos en backend...');
  console.log('üåê Backend URL:', BACKEND_URL);
  console.log('='.repeat(60));
  console.log('');
  
  // Datos de prueba para crear un proyecto
  const projectData = {
    nombre: 'Proyecto Test Geocodificaci√≥n',
    ubicacion: 'Santiago, Chile',
    fecha_inicio: new Date().toISOString().split('T')[0] // Fecha de hoy en formato YYYY-MM-DD
  };
  
  console.log('üìã Datos del proyecto de prueba:');
  console.log(JSON.stringify(projectData, null, 2));
  console.log('');
  
  try {
    // Test sin autenticaci√≥n para ver el error espec√≠fico
    console.log('1Ô∏è‚É£  Intentando crear proyecto SIN autenticaci√≥n...');
    try {
      const response = await axios.post(`${BACKEND_URL}/proyectos`, projectData, {
        timeout: 15000,
        validateStatus: function (status) {
          return status < 600; // Aceptar todos los c√≥digos de respuesta
        }
      });
      
      console.log('üìä Respuesta del servidor:');
      console.log('   Status:', response.status);
      console.log('   Headers:', JSON.stringify(response.headers, null, 2));
      console.log('   Data:', JSON.stringify(response.data, null, 2));
      
    } catch (error) {
      console.log('‚ùå Error en la petici√≥n:');
      if (error.response) {
        console.log('   Status:', error.response.status);
        console.log('   Data:', JSON.stringify(error.response.data, null, 2));
        console.log('   Headers:', JSON.stringify(error.response.headers, null, 2));
      } else if (error.request) {
        console.log('   No se recibi√≥ respuesta del servidor');
        console.log('   Request:', error.request);
      } else {
        console.log('   Error configurando request:', error.message);
      }
    }
    
    console.log('');
    console.log('2Ô∏è‚É£  Verificando validaciones del backend...');
    
    // Test con datos incompletos para ver validaciones
    const invalidData = {
      nombre: '', // Vac√≠o - deber√≠a fallar
      ubicacion: 'Santiago, Chile',
      fecha_inicio: 'invalid-date' // Fecha inv√°lida
    };
    
    console.log('üìã Datos inv√°lidos para probar validaciones:');
    console.log(JSON.stringify(invalidData, null, 2));
    
    try {
      const validationResponse = await axios.post(`${BACKEND_URL}/proyectos`, invalidData, {
        timeout: 15000,
        validateStatus: function (status) {
          return status < 600;
        }
      });
      
      console.log('üìä Respuesta con datos inv√°lidos:');
      console.log('   Status:', validationResponse.status);
      console.log('   Data:', JSON.stringify(validationResponse.data, null, 2));
      
    } catch (error) {
      console.log('üìä Error de validaci√≥n (esperado):');
      if (error.response) {
        console.log('   Status:', error.response.status);
        console.log('   Data:', JSON.stringify(error.response.data, null, 2));
      }
    }
    
    console.log('');
    console.log('3Ô∏è‚É£  Verificando ruta de login...');
    
    // Test de login para obtener token (opcional)
    try {
      const loginResponse = await axios.post(`${BACKEND_URL}/users/login`, {
        email: 'test@example.com',
        password: 'invalid'
      }, {
        timeout: 10000,
        validateStatus: function (status) {
          return status < 600;
        }
      });
      
      console.log('üìä Respuesta de login:');
      console.log('   Status:', loginResponse.status);
      console.log('   Data:', JSON.stringify(loginResponse.data, null, 2));
      
    } catch (error) {
      console.log('üìä Respuesta de login (esperado fallo):');
      if (error.response) {
        console.log('   Status:', error.response.status);
        console.log('   Data:', JSON.stringify(error.response.data, null, 2));
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error general durante las pruebas:', error.message);
  }
  
  console.log('');
  console.log('üìã AN√ÅLISIS DEL ERROR:');
  console.log('='.repeat(60));
  console.log('');
  console.log('El error "Object { errors: (1) [‚Ä¶] }" sugiere que:');
  console.log('');
  console.log('1Ô∏è‚É£  Hay un error de validaci√≥n en el backend');
  console.log('2Ô∏è‚É£  Probablemente un campo requerido est√° faltando o es inv√°lido');
  console.log('3Ô∏è‚É£  El formato de fecha podr√≠a estar causando problemas');
  console.log('4Ô∏è‚É£  La validaci√≥n de empresa_rut podr√≠a estar fallando');
  console.log('');
  console.log('üîß POSIBLES SOLUCIONES:');
  console.log('   ‚Ä¢ Verificar que fecha_inicio est√© en formato ISO8601');
  console.log('   ‚Ä¢ Asegurarse de que el token JWT sea v√°lido');
  console.log('   ‚Ä¢ Revisar que empresa_rut est√© en el token');
  console.log('   ‚Ä¢ Verificar logs de Vercel para m√°s detalles');
  console.log('');
  console.log('üì± Para ver logs detallados:');
  console.log('   1. Ve al dashboard de Vercel');
  console.log('   2. Proyecto backend ‚Üí Functions');
  console.log('   3. Mira los logs en tiempo real');
  console.log('   4. Intenta crear un proyecto desde el frontend');
};

if (require.main === module) {
  testProjectCreation();
}

module.exports = { testProjectCreation };
