/**
 * Script completo para probar la creaci√≥n de proyectos con autenticaci√≥n
 * Simula exactamente lo que hace el frontend
 */

const axios = require('axios');

const BACKEND_URL = 'https://3332-lilac.vercel.app/api';

// Datos de usuario de prueba - ajusta seg√∫n tu base de datos
const TEST_USER = {
  email: 'test@example.com',
  password: 'TestPassword123!'
};

const testFullProjectCreation = async () => {
  console.log('üß™ Probando creaci√≥n de proyecto completa con autenticaci√≥n...');
  console.log('='.repeat(70));
  console.log('');

  let token = null;

  try {
    // Paso 1: Intentar autenticarse
    console.log('1Ô∏è‚É£  Intentando autenticaci√≥n...');
    console.log(`   Email: ${TEST_USER.email}`);
    
    try {
      const loginResponse = await axios.post(`${BACKEND_URL}/auth/login`, {
        email: TEST_USER.email,
        password: TEST_USER.password
      }, {
        timeout: 15000,
        validateStatus: function (status) {
          return status < 500;
        }
      });

      if (loginResponse.status === 200 && loginResponse.data.token) {
        token = loginResponse.data.token;
        console.log('‚úÖ Autenticaci√≥n exitosa');
        console.log(`   Token: ${token.substring(0, 20)}...`);
      } else {
        console.log('‚ùå Autenticaci√≥n fallida:', loginResponse.status, loginResponse.data);
        console.log('');
        console.log('üí° SOLUCIONES:');
        console.log('   1. Reg√≠strate primero desde el frontend');
        console.log('   2. O verifica las credenciales en TEST_USER');
        console.log('   3. O usa las credenciales de un usuario existente');
        return;
      }
    } catch (error) {
      console.log('‚ùå Error en autenticaci√≥n:', error.response?.data || error.message);
      
      // Intentar registro si el login falla
      console.log('');
      console.log('üîÑ Intentando registro autom√°tico...');
      try {
        const registerData = {
          nombre: 'Usuario Test',
          email: TEST_USER.email,
          password: TEST_USER.password,
          empresa_rut: '12345678-9',
          razon_social: 'Empresa Test Geocodificaci√≥n'
        };

        const registerResponse = await axios.post(`${BACKEND_URL}/auth/register`, registerData, {
          timeout: 15000,
          validateStatus: function (status) {
            return status < 500;
          }
        });

        console.log('üìä Respuesta de registro:');
        console.log(`   Status: ${registerResponse.status}`);
        console.log(`   Data:`, JSON.stringify(registerResponse.data, null, 2));

        if (registerResponse.status === 201) {
          console.log('‚úÖ Registro exitoso, intentando login nuevamente...');
          
          const secondLoginResponse = await axios.post(`${BACKEND_URL}/auth/login`, {
            email: TEST_USER.email,
            password: TEST_USER.password
          });

          if (secondLoginResponse.data.token) {
            token = secondLoginResponse.data.token;
            console.log('‚úÖ Login exitoso despu√©s del registro');
          }
        }
      } catch (registerError) {
        console.log('‚ùå Error en registro:', registerError.response?.data || registerError.message);
        return;
      }
    }

    if (!token) {
      console.log('‚ùå No se pudo obtener token de autenticaci√≥n');
      return;
    }

    console.log('');

    // Paso 2: Crear proyecto con autenticaci√≥n
    console.log('2Ô∏è‚É£  Creando proyecto con token de autenticaci√≥n...');
    
    const projectData = {
      nombre: 'Test Geocodificaci√≥n Autom√°tica',
      ubicacion: 'Valpara√≠so, Chile',
      fecha_inicio: new Date().toISOString().split('T')[0]
    };

    console.log('üìã Datos del proyecto:');
    console.log(JSON.stringify(projectData, null, 2));
    console.log('');

    try {
      const createResponse = await axios.post(`${BACKEND_URL}/proyectos`, projectData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000, // 30 segundos para geocodificaci√≥n
        validateStatus: function (status) {
          return status < 600;
        }
      });

      console.log('üìä Respuesta de creaci√≥n de proyecto:');
      console.log(`   Status: ${createResponse.status}`);
      console.log(`   Headers:`, JSON.stringify(createResponse.headers, null, 2));
      console.log(`   Data:`, JSON.stringify(createResponse.data, null, 2));

      if (createResponse.status === 201) {
        console.log('');
        console.log('üéâ ¬°PROYECTO CREADO EXITOSAMENTE!');
        
        const proyecto = createResponse.data;
        if (proyecto.latitud && proyecto.longitud) {
          console.log('üåç GEOCODIFICACI√ìN EXITOSA:');
          console.log(`   üìç Coordenadas: ${proyecto.latitud}, ${proyecto.longitud}`);
          
          if (proyecto.geocoding_info) {
            console.log(`   üîç Estado: ${proyecto.geocoding_info.status}`);
            console.log(`   üìã Direcci√≥n normalizada: ${proyecto.geocoding_info.display_name || 'N/A'}`);
          }
        } else {
          console.log('‚ö†Ô∏è  Proyecto creado pero sin coordenadas');
        }
      } else {
        console.log('‚ùå Error creando proyecto:');
        console.log(`   Mensaje: ${createResponse.data?.message || 'Error desconocido'}`);
        if (createResponse.data?.errors) {
          console.log('   Errores de validaci√≥n:');
          createResponse.data.errors.forEach((error, index) => {
            console.log(`     ${index + 1}. ${error.msg} (campo: ${error.param})`);
          });
        }
      }

    } catch (createError) {
      console.log('‚ùå Error en la petici√≥n de creaci√≥n:');
      console.log(`   Mensaje: ${createError.message}`);
      
      if (createError.response) {
        console.log(`   Status: ${createError.response.status}`);
        console.log(`   Data:`, JSON.stringify(createError.response.data, null, 2));
        
        // Analizar errores espec√≠ficos
        if (createError.response.status === 500) {
          console.log('');
          console.log('üîç ERROR 500 - AN√ÅLISIS:');
          console.log('   ‚Ä¢ Posible error en la geocodificaci√≥n (Nominatim)');
          console.log('   ‚Ä¢ Error en la base de datos (faltan columnas latitud/longitud)');
          console.log('   ‚Ä¢ Error en el servicio de geocodificaci√≥n');
          console.log('   ‚Ä¢ Timeout en la petici√≥n a Nominatim');
        } else if (createError.response.status === 400) {
          console.log('');
          console.log('üîç ERROR 400 - VALIDACI√ìN:');
          if (createError.response.data.errors) {
            createError.response.data.errors.forEach(error => {
              console.log(`   ‚Ä¢ ${error.msg} (campo: ${error.param})`);
            });
          }
        }
      }
    }

  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  }

  console.log('');
  console.log('üìã PR√ìXIMOS PASOS PARA DEBUGGEAR:');
  console.log('='.repeat(70));
  console.log('1Ô∏è‚É£  Ve al dashboard de Vercel');
  console.log('2Ô∏è‚É£  Proyecto backend ‚Üí Functions ‚Üí Logs');
  console.log('3Ô∏è‚É£  Busca logs de cuando ejecutes este script');
  console.log('4Ô∏è‚É£  Mira si hay errores de geocodificaci√≥n o base de datos');
  console.log('');
  console.log('üîß SI HAY ERROR DE GEOCODIFICACI√ìN:');
  console.log('   ‚Ä¢ Verifica que axios est√© en dependencies (no devDependencies)');
  console.log('   ‚Ä¢ Revisa que Nominatim est√© respondiendo');
  console.log('   ‚Ä¢ Aumenta el timeout si es necesario');
  console.log('');
  console.log('üóÉÔ∏è  SI HAY ERROR DE BASE DE DATOS:');
  console.log('   ‚Ä¢ Ejecuta la migraci√≥n SQL para agregar columnas latitud/longitud');
  console.log('   ‚Ä¢ Verifica la conexi√≥n a Neon Postgres');
};

if (require.main === module) {
  testFullProjectCreation();
}

module.exports = { testFullProjectCreation };
